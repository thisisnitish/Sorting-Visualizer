{"version":3,"sources":["components/sortingAlgorithms/Mergesort.js","components/sortingAlgorithms/QuickSort.js","components/sortingAlgorithms/SelectionSort.js","components/sortingAlgorithms/HeapSort.js","components/SortingVisualizer.jsx","components/sortingAlgorithms/InsertionSort.js","components/sortingAlgorithms/BubbleSort.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","left","right","quickSorthelper","index","pivot","swap","partition","leftIdx","rightIdx","temp","min_idx","heapify","max","idxA","idxB","SortingVisualizer","props","handleChange","event","arraySize","target","value","replace","setState","size","state","isFinished","quickSort","mergeSort","heapSort","bubbleSort","insertionSort","selectionSort","this","resetArray","prevprops","prevState","highestTimeoutId","setTimeout","clearTimeout","arrayBars","document","getElementsByClassName","randomIntFromInterval","style","backgroundColor","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","height","getHeapSortAnimations","getSelectionSortAnimations","getInsertionSortAnimations","len","getBubbleSortAnimations","className","minHeight","map","idx","key","marginBottom","paddingBottom","width","id","name","onChange","type","aria-describedby","placeholder","disabled","onClick","React","Component","min","random","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1b84f792.chunk.js","sourcesContent":["\nexport function getMergeSortAnimations(array){\n    const animations = [];\n    if(array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length-1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations\n){\n    if(startIdx === endIdx) return;\n\n    const middleIdx = Math.floor((startIdx + endIdx)/2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx+1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations\n){\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx+1;\n\n    while(i <= middleIdx && j <= endIdx){\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n\n      if(auxiliaryArray[i] <= auxiliaryArray[j]){\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      }\n      else{\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n\n    while(i <= middleIdx){\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n","\nexport function getQuickSortAnimations(array, left, right){\n    const animations = [];\n    \n    quickSorthelper(array, left, right, animations);\n    \n    return animations;\n}\n\nfunction quickSorthelper(array, left, right, animations) {\n\n  var index; //partitioning index\n\n  if (array.length > 1) {\n    index = partition(array, left, right, animations);\n\n    if (left < index - 1) quickSorthelper(array, left, index - 1, animations);\n\n    if (index < right) quickSorthelper(array, index, right, animations);\n  }\n}\n\nfunction partition(array, left, right, animations){\n    var pivot = array[Math.floor((right + left)/2)];    //Taking middle element as pivot element anyone can be taken your wish\n\n    //basically using two pointer method\n    var i = left;   //left pointer\n    var j = right;  //right pointer\n\n    while(i <= j){\n        //increasing the right pointer\n        while(array[i] < pivot)\n            i++;\n        \n        //decreasing the left pointer\n        while(array[j] > pivot)\n            j--;\n            \n        if(i <= j){\n            swap(array, i, j, animations);     //swap both the elements\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nfunction swap(array, leftIdx, rightIdx, animations){\n    \n    //to change the color\n    animations.push([leftIdx, rightIdx, array[leftIdx], array[rightIdx]]);\n    //to change the position\n    animations.push([leftIdx, rightIdx, array[leftIdx], array[rightIdx]]);\n    var temp = array[leftIdx];\n    array[leftIdx] = array[rightIdx];\n    array[rightIdx] = temp;\n}\n","\nexport function getSelectionSortAnimations(array){\n    const animations = [];\n    var min_idx;\n\n    for(var i=0; i<array.length-1; i++){\n        min_idx = i;\n\n        for(var j = i+1; j < array.length; j++){\n            if(array[j] < array[min_idx])\n                min_idx = j;\n        }\n        // animations.push([min_idx, i, array[min_idx], array[i]]);\n        // animations.push([min_idx, i, array[min_idx], array[i]]);\n        swap(array, min_idx, i, animations);\n    }\n    return animations;\n}\n\nfunction swap(array, min_idx, i, animations){\n\n  //to change the color\n  animations.push([min_idx, i, array[min_idx], array[i]]);\n  //to change the position\n  animations.push([min_idx, i, array[min_idx], array[i]]);\n\n  var temp = array[min_idx];\n  array[min_idx] = array[i];\n  array[i] = temp;\n}\n","\nexport function getHeapSortAnimations(array){\n  const animations = [];\n  var length = array.length;\n\n  //Building heap\n  for (var i = Math.floor(length / 2); i >= 0; i--) {\n    heapify(array, i, length, animations);\n  }\n\n  // One by one extract an element from heap\n  for(i = array.length - 1; i > 0; i--){\n      swap(array, 0, i, animations);\n      length--;\n      heapify(array, 0, length, animations);\n  }\n  return animations;\n}\n\nfunction heapify(array, i, length, animations){\n  var max = i;\n  var left = 2 * i + 1;\n  var right = 2 * i + 2;\n\n  // If left child is larger than root\n  if (left < length && array[left] > array[max]) {\n    max = left;\n  }\n\n  // If right child is larger than max so far\n  if (right < length && array[right] > array[max]) {\n    max = right;\n  }\n\n  // If max is not root\n  if(max !== i){\n\n    swap(array, i, max, animations);\n\n    // Recursively heapify the affected sub-tree\n    heapify(array, max, length, animations);\n  }\n}\n\nfunction swap(array, idxA, idxB, animations){\n\n    //to change the color\n    animations.push([idxA, idxB, array[idxA], array[idxB]]);\n    //to change the position\n    animations.push([idxA, idxB, array[idxA], array[idxB]]);\n    var temp = array[idxA];\n    array[idxA] = array[idxB];\n    array[idxB] = temp;\n    return animations;\n}\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport { getMergeSortAnimations } from \"./sortingAlgorithms/Mergesort\";\nimport { getBubbleSortAnimations } from \"./sortingAlgorithms/BubbleSort\";\nimport { getInsertionSortAnimations } from \"./sortingAlgorithms/InsertionSort\";\nimport { getQuickSortAnimations } from \"./sortingAlgorithms/QuickSort\";\nimport { getSelectionSortAnimations } from \"./sortingAlgorithms/SelectionSort\";\nimport { getHeapSortAnimations } from \"./sortingAlgorithms/HeapSort\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1; // merge sort\nconst ANIMATION_SPEED_BS = 1; // bubble sort\nconst ANIMATION_SPEED_IS = 1; // insertion sort\nconst ANIMATION_SPEED_QS = 1; // quick sort\nconst ANIMATION_SPEED_SS = 1.5; // selection sort\nconst ANIMATION_SPEED_HS = 1; // heap sort\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"#7a76e8\";\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"#ff0000\";\n\n//after all the bars in the sorted orders\nconst SUCCESS_COLOR = \"#046327\";\n\n//color for the sorted bars\nconst SORTED_BAR_COLOR = \"#756454\";\n\n//color for the single bars for comparison with the other bar of different color\nconst SINGLE_BAR_COLOR = \"#a7fa00\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      isFinished: false,\n      quickSort: false,\n      mergeSort: false,\n      heapSort: false,\n      bubbleSort: false,\n      insertionSort: false,\n      selectionSort: false,\n      size: 200,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  componentDidUpdate(prevprops, prevState) {\n    if (\n      prevState.quickSort !== this.state.quickSort &&\n      this.state.quickSort === true\n    )\n      this.quickSort();\n    if (\n      prevState.bubbleSort !== this.state.bubbleSort &&\n      this.state.bubbleSort === true\n    )\n      this.bubbleSort();\n    if (\n      prevState.mergeSort !== this.state.mergeSort &&\n      this.state.mergeSort === true\n    )\n      this.mergeSort();\n    if (\n      prevState.insertionSort !== this.state.insertionSort &&\n      this.state.insertionSort === true\n    )\n      this.insertionSort();\n    if (\n      prevState.selectionSort !== this.state.selectionSort &&\n      this.state.selectionSort === true\n    )\n      this.selectionSort();\n    if (\n      prevState.heapSort !== this.state.heapSort &&\n      this.state.heapSort === true\n    )\n      this.heapSort();\n\n    //to render the real time size\n    if (prevState.size !== this.state.size) this.resetArray();\n  }\n\n\n  resetArray() {\n    const array = [];\n    //to stop all timeout on the page\n    var highestTimeoutId = setTimeout(\";\");\n    for (var i = 0; i < highestTimeoutId; i++) {\n      clearTimeout(i);\n    }\n\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < this.state.size; i++) {\n      array.push(randomIntFromInterval(5, 700));\n    }\n\n    for (let j = 0; j < arrayBars.length; j++) {\n      //reset the color to original color i.e\n      const barOneStyle = arrayBars[j].style;\n      barOneStyle.backgroundColor = PRIMARY_COLOR;\n    }\n\n    this.setState({\n      array,\n      isFinished: false,\n      quickSort: false,\n      mergeSort: false,\n      heapSort: false,\n      bubbleSort: false,\n      insertionSort: false,\n      selectionSort: false\n    });\n  }\n\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    //giving the animation after all the array bars will be in the sorted order\n    //giving success color to the array bar\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SUCCESS_COLOR;\n        }, j);\n      }\n    }, animations.length * ANIMATION_SPEED_MS + 400);\n\n    //managing the state\n    setTimeout(() => {\n      this.setState({\n        isFinished: !this.state.isFinished,\n        mergeSort: false,\n      });\n    }, animations.length * ANIMATION_SPEED_MS + 500);\n  }\n\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array, 0, this.state.array.length-1);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n\n      if (i % 2 === 0) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SINGLE_BAR_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_QS);\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SORTED_BAR_COLOR; // PRIMARY_COLOR\n          barTwoStyle.backgroundColor = SORTED_BAR_COLOR; // PRIMARY_COLOR\n          barOneStyle.height = `${animations[i][3]}px`;\n          barTwoStyle.height = `${animations[i][2]}px`;\n        }, i * ANIMATION_SPEED_QS);\n      }\n    }\n\n    //Now the array is sorted and now giving the animations of success color\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SUCCESS_COLOR;\n        }, j);\n      }\n    }, animations.length + ANIMATION_SPEED_QS + 400);\n\n    //managing the state\n    setTimeout(() => {\n      this.setState({\n        isFinished: !this.state.isFinished,\n        quickSort: false,\n      });\n    }, animations.length * ANIMATION_SPEED_QS + 500);\n  }\n\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n\n      if (i % 2 === 0) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_HS);\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.height = `${animations[i][3]}px`;\n          barTwoStyle.height = `${animations[i][2]}px`;\n        }, i * ANIMATION_SPEED_HS);\n      }\n    }\n\n    //Now the array is sorted and now giving the animations of success color\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SUCCESS_COLOR;\n        }, j);\n      }\n    }, animations.length * ANIMATION_SPEED_HS + 400);\n\n    //managing the state\n    setTimeout(() => {\n      this.setState({\n        isFinished: !this.state.isFinished,\n        heapSort: false,\n      });\n    }, animations.length * ANIMATION_SPEED_MS + 500);\n  }\n\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n\n      if (i % 2 === 0) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_SS);\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR; // PRIMARY_COLOR\n          barTwoStyle.backgroundColor = SORTED_BAR_COLOR; // PRIMARY_COLOR\n          barOneStyle.height = `${animations[i][3]}px`;\n          barTwoStyle.height = `${animations[i][2]}px`;\n        }, i * ANIMATION_SPEED_SS);\n      }\n    }\n\n    //Now the array is sorted and now giving the animations of success color\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SUCCESS_COLOR;\n        }, j);\n      }\n    }, animations.length + ANIMATION_SPEED_SS + 400);\n\n    //managing the state\n    setTimeout(() => {\n      this.setState({\n        isFinished: !this.state.isFinished,\n        selectionSort: false,\n      });\n    }, animations.length * ANIMATION_SPEED_SS + 500);\n\n  }\n\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n\n      if (i % 2 === 0) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_IS);\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SINGLE_BAR_COLOR; // PRIMARY_COLOR\n          barTwoStyle.backgroundColor = SORTED_BAR_COLOR; // PRIMARY_COLOR\n          barOneStyle.height = `${animations[i][3]}px`;\n          barTwoStyle.height = `${animations[i][2]}px`;\n        }, i * ANIMATION_SPEED_IS);\n      }\n    }\n\n    //Now the array is sorted and now giving the animations of success color\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SUCCESS_COLOR;\n        }, j);\n      }\n    }, animations.length + ANIMATION_SPEED_IS + 400);\n\n    //managing the state\n    setTimeout(() => {\n      this.setState({\n        isFinished: !this.state.isFinished,\n        insertionSort: false,\n      });\n    }, animations.length * ANIMATION_SPEED_IS + 500);\n  }\n\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n\n      if (i % 2 === 0) {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SINGLE_BAR_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR; \n        }, i * ANIMATION_SPEED_BS);\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR; // PRIMARY_COLOR\n          barTwoStyle.backgroundColor = PRIMARY_COLOR; // PRIMARY_COLOR\n          barOneStyle.height = `${animations[i][3]}px`;\n          barTwoStyle.height = `${animations[i][2]}px`;\n        }, i * ANIMATION_SPEED_BS);\n      }\n    }\n\n    //Now the array is sorted and now giving the animations of success color\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SUCCESS_COLOR;\n        }, j);\n      }\n    }, animations.length + ANIMATION_SPEED_BS + 400);\n\n    //managing the state\n    setTimeout(() => {\n      this.setState({\n        isFinished: !this.state.isFinished,\n        bubbleSort: false,\n      });\n    }, animations.length * ANIMATION_SPEED_BS + 500);\n  }\n\n  //function for form to give the size, if the user will try to give the array size more than 500 then not increase more than\n  //500\n  handleChange = (event) => {\n    //to allow only numbers\n    const arraySize = event.target.value.replace(/\\D/, \"\");\n    this.setState({\n      size: arraySize <= 350 ? arraySize : 350, //to limit the size\n    });\n  };\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <>\n        {/* ------------------------------------------------BARS----------------------------------------------------- */}\n        <div className=\"container-fluid\">\n          <div\n            className=\"row no-gutters pt-4 mt-2 w-100 d-flex align-items-end\"\n            style={{ minHeight: \"90vh\" }}\n          >\n            <div className=\"col-12 pb-2\">\n              {array.map((value, idx) => (\n                <div\n                  className=\"array-bar\"\n                  key={idx}\n                  style={{\n                    backgroundColor: PRIMARY_COLOR,\n                    height: `${value}px`,\n                    marginBottom: 0,\n                    paddingBottom: 0,\n                    width: `${29 / this.state.size}%`,\n                  }}\n                ></div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container-fluid\">\n          <div className=\"row no-gutters\">\n            {/* Input form to give the array size */}\n            <div className=\"col-md-3 d-flex align-items-center\">\n              <input\n                id=\"array size\"\n                name=\"size\"\n                value={this.state.size}\n                onChange={this.handleChange}\n                type=\"text\"\n                className=\"form-control\"\n                aria-describedby=\"array size\"\n                placeholder=\"Array Size\"\n                disabled={\n                  this.state.mergeSort ||\n                  this.state.bubbleSort ||\n                  this.state.insertionSort ||\n                  this.state.quickSort ||\n                  this.state.heapSort ||\n                  this.state.selectionSort\n                }\n              />\n              <small\n                id=\"passwordHelpBlock\"\n                className=\"form-text text-muted ml-1 pt-1\"\n              >\n                Maximum 350\n              </small>\n            </div>\n\n            <div className=\"d-flex flex-row justify-content-evenly\">\n              <button\n                className=\"btn btn-outline-info font-weight-bold ml-4\"\n                onClick={() => this.resetArray()}\n              >\n                Generate New Array\n              </button>\n              {/*--------------------------------------- Merge Sort -----------------------------------*/}\n              {!this.state.mergeSort && (\n                <button\n                  className=\"btn btn-outline-info font-weight-bold ml-1\"\n                  onClick={() => {\n                    this.setState({ mergeSort: true });\n                  }}\n                  disabled={\n                    this.state.bubbleSort ||\n                    this.state.insertionSort ||\n                    this.state.quickSort ||\n                    this.state.selectionSort ||\n                    this.state.heapSort\n                  }\n                >\n                  Merge Sort\n                </button>\n              )}{\" \"}\n              {this.state.mergeSort && (\n                <button\n                  className=\"btn btn-outline-secondary font-weight-bold ml-1\"\n                  disabled={this.state.mergeSort}\n                >\n                  Merge Sort\n                </button>\n              )}\n              {/* ---------------------------------------Bubble Sort------------------------------------ */}\n              {!this.state.bubbleSort && (\n                <button\n                  className=\"btn btn-outline-info font-weight-bold ml-1\"\n                  onClick={() => {\n                    this.setState({ bubbleSort: true });\n                  }}\n                  disabled={\n                    this.state.mergeSort ||\n                    this.state.insertionSort ||\n                    this.state.quickSort ||\n                    this.state.selectionSort ||\n                    this.state.heapSort\n                  }\n                >\n                  Bubble Sort\n                </button>\n              )}{\" \"}\n              {this.state.bubbleSort && (\n                <button\n                  className=\"btn btn-outline-secondary font-weight-bold ml-1\"\n                  disabled={this.state.bubbleSort}\n                >\n                  Bubble Sort\n                </button>\n              )}\n              {/* ---------------------------------------Insertion Sort------------------------------------ */}\n              {!this.state.insertionSort && (\n                <button\n                  className=\"btn btn-outline-info font-weight-bold ml-1\"\n                  onClick={() => {\n                    this.setState({ insertionSort: true });\n                  }}\n                  disabled={\n                    this.state.mergeSort ||\n                    this.state.bubbleSort ||\n                    this.state.quickSort ||\n                    this.state.heapSort ||\n                    this.state.selectionSort\n                  }\n                >\n                  Insertion Sort\n                </button>\n              )}{\" \"}\n              {this.state.insertionSort && (\n                <button\n                  className=\"btn btn-outline-secondary font-weight-bold ml-1\"\n                  disabled={this.state.insertionSort}\n                >\n                  Insertion Sort\n                </button>\n              )}\n              {/* ---------------------------------------Quick Sort------------------------------------ */}\n              {!this.state.quickSort && (\n                <button\n                  className=\"btn btn-outline-info font-weight-bold ml-1\"\n                  onClick={() => {\n                    this.setState({ quickSort: true });\n                  }}\n                  disabled={\n                    this.state.mergeSort ||\n                    this.state.bubbleSort ||\n                    this.state.insertionSort ||\n                    this.state.selectionSort ||\n                    this.state.heapSort\n                  }\n                >\n                  Quick Sort\n                </button>\n              )}{\" \"}\n              {this.state.quickSort && (\n                <button\n                  className=\"btn btn-outline-secondary font-weight-bold ml-1\"\n                  disabled={this.state.quickSort}\n                >\n                  Quick Sort\n                </button>\n              )}\n              {/* ---------------------------------------Selection Sort------------------------------------ */}\n              {!this.state.selectionSort && (\n                <button\n                  className=\"btn btn-outline-info font-weight-bold ml-1\"\n                  onClick={() => {\n                    this.setState({ selectionSort: true });\n                  }}\n                  disabled={\n                    this.state.mergeSort ||\n                    this.state.bubbleSort ||\n                    this.state.insertionSort ||\n                    this.state.quickSort ||\n                    this.state.heapSort\n                  }\n                >\n                  Selection Sort\n                </button>\n              )}{\" \"}\n              {this.state.selectionSort && (\n                <button\n                  className=\"btn btn-outline-secondary font-weight-bold ml-1\"\n                  disabled={this.state.selectionSort}\n                >\n                  Selection Sort\n                </button>\n              )}\n              {/* ---------------------------------------Heap Sort------------------------------------ */}\n              {!this.state.heapSort && (\n                <button\n                  className=\"btn btn-outline-info font-weight-bold ml-1\"\n                  onClick={() => {\n                    this.setState({ heapSort: true });\n                  }}\n                  disabled={\n                    this.state.mergeSort ||\n                    this.state.bubbleSort ||\n                    this.state.insertionSort ||\n                    this.state.quickSort ||\n                    this.state.selectionSort\n                  }\n                >\n                  Heap Sort\n                </button>\n              )}{\" \"}\n              {this.state.heapSort && (\n                <button\n                  className=\"btn btn-outline-secondary font-weight-bold ml-1\"\n                  disabled={this.state.heapSort}\n                >\n                  Heap Sort\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst randomIntFromInterval = (min, max) => {\n  //min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n","\nexport function getInsertionSortAnimations(array){\n    const animations = [];\n    for(var i=0; i<array.length; i++){\n        let value = array[i];\n\n        for(var j=i-1; j>=0 && value < array[j]; j--){\n          //to change the color\n          animations.push([j, j + 1, array[j], array[j + 1]]);\n          //to change the position\n          animations.push([j, j + 1, array[j], array[j + 1]]);\n\n          array[j+1] = array[j];\n        }\n        array[j+1] = value;\n    }\n    return animations;\n}\n","\nexport function getBubbleSortAnimations(array){\n    const animations = [];\n    if(array.length <= 1) return array;\n\n    const auxiliaryArray = array.slice();\n    let len = auxiliaryArray.length;\n    for(let i=0; i<len-1; i++){\n        for(let j=0; j<len-i-1; j++){\n            if (auxiliaryArray[j] > auxiliaryArray[j + 1]) {\n              //to change the color\n              animations.push([\n                j,\n                j + 1,\n                auxiliaryArray[j],\n                auxiliaryArray[j + 1],\n              ]);\n              //to change the position\n              animations.push([\n                j,\n                j + 1,\n                auxiliaryArray[j],\n                auxiliaryArray[j + 1],\n              ]);\n\n              let temp = auxiliaryArray[j];\n              auxiliaryArray[j] = auxiliaryArray[j + 1];\n              auxiliaryArray[j + 1] = temp;\n            }\n        }\n    }\n    return animations;\n}\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './components/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}